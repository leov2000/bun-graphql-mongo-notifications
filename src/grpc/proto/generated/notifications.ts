// @generated by protobuf-ts 2.9.6 with parameter server_grpc1,client_grpc1,long_type_string
// @generated from protobuf file "notifications.proto" (package "notification", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Int32Value } from "./google/protobuf/wrappers";
import { DoubleValue } from "./google/protobuf/wrappers";
import { StringValue } from "./google/protobuf/wrappers";
/**
 * @generated from protobuf message notification.GetUserNotificationsRequest
 */
export interface GetUserNotificationsRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * @generated from protobuf field: bool sleep = 2;
     */
    sleep: boolean;
}
/**
 * @generated from protobuf message notification.GetGroupMembersRequest
 */
export interface GetGroupMembersRequest {
    /**
     * @generated from protobuf field: string group_name = 1;
     */
    groupName: string;
}
/**
 * @generated from protobuf message notification.GetGroupNotificationsRequest
 */
export interface GetGroupNotificationsRequest {
    /**
     * @generated from protobuf field: string group_name = 1;
     */
    groupName: string;
    /**
     * @generated from protobuf field: repeated string tags = 2;
     */
    tags: string[];
}
/**
 * @generated from protobuf message notification.SendNotificationRequest
 */
export interface SendNotificationRequest {
    /**
     * @generated from protobuf field: string to_user = 1;
     */
    toUser: string;
    /**
     * @generated from protobuf field: string from_user = 2;
     */
    fromUser: string;
    /**
     * @generated from protobuf field: string payload = 3;
     */
    payload: string;
    /**
     * @generated from protobuf field: notification.TTLOptions ttl = 4;
     */
    ttl?: TTLOptions;
}
/**
 * @generated from protobuf message notification.SendGroupNotificationRequest
 */
export interface SendGroupNotificationRequest {
    /**
     * @generated from protobuf field: string group_name = 1;
     */
    groupName: string;
    /**
     * @generated from protobuf field: string from_user = 2;
     */
    fromUser: string;
    /**
     * @generated from protobuf field: string payload = 3;
     */
    payload: string;
    /**
     * @generated from protobuf field: repeated string tags = 4;
     */
    tags: string[];
    /**
     * @generated from protobuf field: notification.TTLOptions ttl = 5;
     */
    ttl?: TTLOptions;
}
/**
 * @generated from protobuf message notification.GroupMemberRequest
 */
export interface GroupMemberRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * @generated from protobuf field: string group_name = 2;
     */
    groupName: string;
}
/**
 * @generated from protobuf message notification.CreateGroupRequest
 */
export interface CreateGroupRequest {
    /**
     * @generated from protobuf field: string group_name = 1;
     */
    groupName: string;
    /**
     * @generated from protobuf field: repeated string users = 2;
     */
    users: string[];
}
/**
 * @generated from protobuf message notification.SleepNotificationRequest
 */
export interface SleepNotificationRequest {
    /**
     * @generated from protobuf field: string notification_id = 1;
     */
    notificationId: string;
    /**
     * @generated from protobuf field: bool sleep = 2;
     */
    sleep: boolean;
}
/**
 * @generated from protobuf message notification.UserRequest
 */
export interface UserRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
}
/**
 * @generated from protobuf message notification.GroupNotificationsRequest
 */
export interface GroupNotificationsRequest {
    /**
     * @generated from protobuf field: string group_name = 1;
     */
    groupName: string;
    /**
     * @generated from protobuf field: repeated string tags = 2;
     */
    tags: string[];
}
/**
 * @generated from protobuf message notification.GetUserNotificationsResponse
 */
export interface GetUserNotificationsResponse {
    /**
     * @generated from protobuf field: repeated notification.Notification notifications = 1;
     */
    notifications: Notification[];
}
/**
 * @generated from protobuf message notification.GetGroupMembersResponse
 */
export interface GetGroupMembersResponse {
    /**
     * @generated from protobuf field: repeated string users = 1;
     */
    users: string[];
}
/**
 * @generated from protobuf message notification.GetGroupNotificationsResponse
 */
export interface GetGroupNotificationsResponse {
    /**
     * @generated from protobuf field: repeated notification.Notification notifications = 1;
     */
    notifications: Notification[];
}
/**
 * @generated from protobuf message notification.SendNotificationResponse
 */
export interface SendNotificationResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
}
/**
 * @generated from protobuf message notification.SendGroupNotificationResponse
 */
export interface SendGroupNotificationResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
}
/**
 * @generated from protobuf message notification.AddGroupMemberResponse
 */
export interface AddGroupMemberResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
}
/**
 * @generated from protobuf message notification.CreateGroupResponse
 */
export interface CreateGroupResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
}
/**
 * @generated from protobuf message notification.RemoveGroupMemberResponse
 */
export interface RemoveGroupMemberResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
}
/**
 * @generated from protobuf message notification.SleepNotificationResponse
 */
export interface SleepNotificationResponse {
    /**
     * @generated from protobuf field: bool result = 1;
     */
    result: boolean;
}
/**
 * @generated from protobuf message notification.Notification
 */
export interface Notification {
    /**
     * @generated from protobuf field: string id = 1 [json_name = "_id"];
     */
    id: string;
    /**
     * @generated from protobuf field: google.protobuf.StringValue user = 2;
     */
    user?: StringValue;
    /**
     * @generated from protobuf field: string from_user = 3;
     */
    fromUser: string;
    /**
     * @generated from protobuf field: google.protobuf.StringValue group_name = 4;
     */
    groupName?: StringValue;
    /**
     * @generated from protobuf field: string payload = 5;
     */
    payload: string;
    /**
     * @generated from protobuf field: bool sleep = 6;
     */
    sleep: boolean;
    /**
     * @generated from protobuf field: repeated string tags = 7;
     */
    tags: string[];
    /**
     * @generated from protobuf field: google.protobuf.DoubleValue expire_at = 8;
     */
    expireAt?: DoubleValue;
    /**
     * @generated from protobuf field: string created_at = 9;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message notification.TTLOptions
 */
export interface TTLOptions {
    /**
     * @generated from protobuf field: google.protobuf.Int32Value mins = 1;
     */
    mins?: Int32Value;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value hours = 2;
     */
    hours?: Int32Value;
    /**
     * @generated from protobuf field: google.protobuf.Int32Value days = 3;
     */
    days?: Int32Value;
}
/**
 * @generated from protobuf message notification.UserGroup
 */
export interface UserGroup {
    /**
     * @generated from protobuf field: repeated string users = 1;
     */
    users: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetUserNotificationsRequest$Type extends MessageType<GetUserNotificationsRequest> {
    constructor() {
        super("notification.GetUserNotificationsRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sleep", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserNotificationsRequest>): GetUserNotificationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.sleep = false;
        if (value !== undefined)
            reflectionMergePartial<GetUserNotificationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserNotificationsRequest): GetUserNotificationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* bool sleep */ 2:
                    message.sleep = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserNotificationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* bool sleep = 2; */
        if (message.sleep !== false)
            writer.tag(2, WireType.Varint).bool(message.sleep);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.GetUserNotificationsRequest
 */
export const GetUserNotificationsRequest = new GetUserNotificationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupMembersRequest$Type extends MessageType<GetGroupMembersRequest> {
    constructor() {
        super("notification.GetGroupMembersRequest", [
            { no: 1, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupMembersRequest>): GetGroupMembersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupName = "";
        if (value !== undefined)
            reflectionMergePartial<GetGroupMembersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupMembersRequest): GetGroupMembersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group_name */ 1:
                    message.groupName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupMembersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group_name = 1; */
        if (message.groupName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.GetGroupMembersRequest
 */
export const GetGroupMembersRequest = new GetGroupMembersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupNotificationsRequest$Type extends MessageType<GetGroupNotificationsRequest> {
    constructor() {
        super("notification.GetGroupNotificationsRequest", [
            { no: 1, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupNotificationsRequest>): GetGroupNotificationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupName = "";
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<GetGroupNotificationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupNotificationsRequest): GetGroupNotificationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group_name */ 1:
                    message.groupName = reader.string();
                    break;
                case /* repeated string tags */ 2:
                    message.tags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupNotificationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group_name = 1; */
        if (message.groupName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupName);
        /* repeated string tags = 2; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.GetGroupNotificationsRequest
 */
export const GetGroupNotificationsRequest = new GetGroupNotificationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendNotificationRequest$Type extends MessageType<SendNotificationRequest> {
    constructor() {
        super("notification.SendNotificationRequest", [
            { no: 1, name: "to_user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from_user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ttl", kind: "message", T: () => TTLOptions }
        ]);
    }
    create(value?: PartialMessage<SendNotificationRequest>): SendNotificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.toUser = "";
        message.fromUser = "";
        message.payload = "";
        if (value !== undefined)
            reflectionMergePartial<SendNotificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendNotificationRequest): SendNotificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string to_user */ 1:
                    message.toUser = reader.string();
                    break;
                case /* string from_user */ 2:
                    message.fromUser = reader.string();
                    break;
                case /* string payload */ 3:
                    message.payload = reader.string();
                    break;
                case /* notification.TTLOptions ttl */ 4:
                    message.ttl = TTLOptions.internalBinaryRead(reader, reader.uint32(), options, message.ttl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendNotificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string to_user = 1; */
        if (message.toUser !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toUser);
        /* string from_user = 2; */
        if (message.fromUser !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromUser);
        /* string payload = 3; */
        if (message.payload !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.payload);
        /* notification.TTLOptions ttl = 4; */
        if (message.ttl)
            TTLOptions.internalBinaryWrite(message.ttl, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.SendNotificationRequest
 */
export const SendNotificationRequest = new SendNotificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendGroupNotificationRequest$Type extends MessageType<SendGroupNotificationRequest> {
    constructor() {
        super("notification.SendGroupNotificationRequest", [
            { no: 1, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from_user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ttl", kind: "message", T: () => TTLOptions }
        ]);
    }
    create(value?: PartialMessage<SendGroupNotificationRequest>): SendGroupNotificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupName = "";
        message.fromUser = "";
        message.payload = "";
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<SendGroupNotificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendGroupNotificationRequest): SendGroupNotificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group_name */ 1:
                    message.groupName = reader.string();
                    break;
                case /* string from_user */ 2:
                    message.fromUser = reader.string();
                    break;
                case /* string payload */ 3:
                    message.payload = reader.string();
                    break;
                case /* repeated string tags */ 4:
                    message.tags.push(reader.string());
                    break;
                case /* notification.TTLOptions ttl */ 5:
                    message.ttl = TTLOptions.internalBinaryRead(reader, reader.uint32(), options, message.ttl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendGroupNotificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group_name = 1; */
        if (message.groupName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupName);
        /* string from_user = 2; */
        if (message.fromUser !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromUser);
        /* string payload = 3; */
        if (message.payload !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.payload);
        /* repeated string tags = 4; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.tags[i]);
        /* notification.TTLOptions ttl = 5; */
        if (message.ttl)
            TTLOptions.internalBinaryWrite(message.ttl, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.SendGroupNotificationRequest
 */
export const SendGroupNotificationRequest = new SendGroupNotificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupMemberRequest$Type extends MessageType<GroupMemberRequest> {
    constructor() {
        super("notification.GroupMemberRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupMemberRequest>): GroupMemberRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.groupName = "";
        if (value !== undefined)
            reflectionMergePartial<GroupMemberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMemberRequest): GroupMemberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* string group_name */ 2:
                    message.groupName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMemberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* string group_name = 2; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.GroupMemberRequest
 */
export const GroupMemberRequest = new GroupMemberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupRequest$Type extends MessageType<CreateGroupRequest> {
    constructor() {
        super("notification.CreateGroupRequest", [
            { no: 1, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "users", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGroupRequest>): CreateGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupName = "";
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<CreateGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupRequest): CreateGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group_name */ 1:
                    message.groupName = reader.string();
                    break;
                case /* repeated string users */ 2:
                    message.users.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group_name = 1; */
        if (message.groupName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupName);
        /* repeated string users = 2; */
        for (let i = 0; i < message.users.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.users[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.CreateGroupRequest
 */
export const CreateGroupRequest = new CreateGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SleepNotificationRequest$Type extends MessageType<SleepNotificationRequest> {
    constructor() {
        super("notification.SleepNotificationRequest", [
            { no: 1, name: "notification_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sleep", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SleepNotificationRequest>): SleepNotificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notificationId = "";
        message.sleep = false;
        if (value !== undefined)
            reflectionMergePartial<SleepNotificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SleepNotificationRequest): SleepNotificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string notification_id */ 1:
                    message.notificationId = reader.string();
                    break;
                case /* bool sleep */ 2:
                    message.sleep = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SleepNotificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string notification_id = 1; */
        if (message.notificationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.notificationId);
        /* bool sleep = 2; */
        if (message.sleep !== false)
            writer.tag(2, WireType.Varint).bool(message.sleep);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.SleepNotificationRequest
 */
export const SleepNotificationRequest = new SleepNotificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserRequest$Type extends MessageType<UserRequest> {
    constructor() {
        super("notification.UserRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserRequest>): UserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        if (value !== undefined)
            reflectionMergePartial<UserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserRequest): UserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.UserRequest
 */
export const UserRequest = new UserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupNotificationsRequest$Type extends MessageType<GroupNotificationsRequest> {
    constructor() {
        super("notification.GroupNotificationsRequest", [
            { no: 1, name: "group_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupNotificationsRequest>): GroupNotificationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupName = "";
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<GroupNotificationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupNotificationsRequest): GroupNotificationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string group_name */ 1:
                    message.groupName = reader.string();
                    break;
                case /* repeated string tags */ 2:
                    message.tags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupNotificationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string group_name = 1; */
        if (message.groupName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupName);
        /* repeated string tags = 2; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.GroupNotificationsRequest
 */
export const GroupNotificationsRequest = new GroupNotificationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserNotificationsResponse$Type extends MessageType<GetUserNotificationsResponse> {
    constructor() {
        super("notification.GetUserNotificationsResponse", [
            { no: 1, name: "notifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Notification }
        ]);
    }
    create(value?: PartialMessage<GetUserNotificationsResponse>): GetUserNotificationsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notifications = [];
        if (value !== undefined)
            reflectionMergePartial<GetUserNotificationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserNotificationsResponse): GetUserNotificationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated notification.Notification notifications */ 1:
                    message.notifications.push(Notification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserNotificationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated notification.Notification notifications = 1; */
        for (let i = 0; i < message.notifications.length; i++)
            Notification.internalBinaryWrite(message.notifications[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.GetUserNotificationsResponse
 */
export const GetUserNotificationsResponse = new GetUserNotificationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupMembersResponse$Type extends MessageType<GetGroupMembersResponse> {
    constructor() {
        super("notification.GetGroupMembersResponse", [
            { no: 1, name: "users", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupMembersResponse>): GetGroupMembersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<GetGroupMembersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupMembersResponse): GetGroupMembersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string users */ 1:
                    message.users.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupMembersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string users = 1; */
        for (let i = 0; i < message.users.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.users[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.GetGroupMembersResponse
 */
export const GetGroupMembersResponse = new GetGroupMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupNotificationsResponse$Type extends MessageType<GetGroupNotificationsResponse> {
    constructor() {
        super("notification.GetGroupNotificationsResponse", [
            { no: 1, name: "notifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Notification }
        ]);
    }
    create(value?: PartialMessage<GetGroupNotificationsResponse>): GetGroupNotificationsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notifications = [];
        if (value !== undefined)
            reflectionMergePartial<GetGroupNotificationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupNotificationsResponse): GetGroupNotificationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated notification.Notification notifications */ 1:
                    message.notifications.push(Notification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupNotificationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated notification.Notification notifications = 1; */
        for (let i = 0; i < message.notifications.length; i++)
            Notification.internalBinaryWrite(message.notifications[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.GetGroupNotificationsResponse
 */
export const GetGroupNotificationsResponse = new GetGroupNotificationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendNotificationResponse$Type extends MessageType<SendNotificationResponse> {
    constructor() {
        super("notification.SendNotificationResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SendNotificationResponse>): SendNotificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = false;
        if (value !== undefined)
            reflectionMergePartial<SendNotificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendNotificationResponse): SendNotificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendNotificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.SendNotificationResponse
 */
export const SendNotificationResponse = new SendNotificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendGroupNotificationResponse$Type extends MessageType<SendGroupNotificationResponse> {
    constructor() {
        super("notification.SendGroupNotificationResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SendGroupNotificationResponse>): SendGroupNotificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = false;
        if (value !== undefined)
            reflectionMergePartial<SendGroupNotificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendGroupNotificationResponse): SendGroupNotificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendGroupNotificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.SendGroupNotificationResponse
 */
export const SendGroupNotificationResponse = new SendGroupNotificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddGroupMemberResponse$Type extends MessageType<AddGroupMemberResponse> {
    constructor() {
        super("notification.AddGroupMemberResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AddGroupMemberResponse>): AddGroupMemberResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = false;
        if (value !== undefined)
            reflectionMergePartial<AddGroupMemberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddGroupMemberResponse): AddGroupMemberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddGroupMemberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.AddGroupMemberResponse
 */
export const AddGroupMemberResponse = new AddGroupMemberResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGroupResponse$Type extends MessageType<CreateGroupResponse> {
    constructor() {
        super("notification.CreateGroupResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGroupResponse>): CreateGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = false;
        if (value !== undefined)
            reflectionMergePartial<CreateGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGroupResponse): CreateGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.CreateGroupResponse
 */
export const CreateGroupResponse = new CreateGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveGroupMemberResponse$Type extends MessageType<RemoveGroupMemberResponse> {
    constructor() {
        super("notification.RemoveGroupMemberResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveGroupMemberResponse>): RemoveGroupMemberResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = false;
        if (value !== undefined)
            reflectionMergePartial<RemoveGroupMemberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveGroupMemberResponse): RemoveGroupMemberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveGroupMemberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.RemoveGroupMemberResponse
 */
export const RemoveGroupMemberResponse = new RemoveGroupMemberResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SleepNotificationResponse$Type extends MessageType<SleepNotificationResponse> {
    constructor() {
        super("notification.SleepNotificationResponse", [
            { no: 1, name: "result", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SleepNotificationResponse>): SleepNotificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = false;
        if (value !== undefined)
            reflectionMergePartial<SleepNotificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SleepNotificationResponse): SleepNotificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool result */ 1:
                    message.result = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SleepNotificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool result = 1; */
        if (message.result !== false)
            writer.tag(1, WireType.Varint).bool(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.SleepNotificationResponse
 */
export const SleepNotificationResponse = new SleepNotificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Notification$Type extends MessageType<Notification> {
    constructor() {
        super("notification.Notification", [
            { no: 1, name: "id", kind: "scalar", jsonName: "_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user", kind: "message", T: () => StringValue },
            { no: 3, name: "from_user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "group_name", kind: "message", T: () => StringValue },
            { no: 5, name: "payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "sleep", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "expire_at", kind: "message", T: () => DoubleValue },
            { no: 9, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Notification>): Notification {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.fromUser = "";
        message.payload = "";
        message.sleep = false;
        message.tags = [];
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<Notification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Notification): Notification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id = 1 [json_name = "_id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.StringValue user */ 2:
                    message.user = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string from_user */ 3:
                    message.fromUser = reader.string();
                    break;
                case /* google.protobuf.StringValue group_name */ 4:
                    message.groupName = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.groupName);
                    break;
                case /* string payload */ 5:
                    message.payload = reader.string();
                    break;
                case /* bool sleep */ 6:
                    message.sleep = reader.bool();
                    break;
                case /* repeated string tags */ 7:
                    message.tags.push(reader.string());
                    break;
                case /* google.protobuf.DoubleValue expire_at */ 8:
                    message.expireAt = DoubleValue.internalBinaryRead(reader, reader.uint32(), options, message.expireAt);
                    break;
                case /* string created_at */ 9:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Notification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1 [json_name = "_id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.StringValue user = 2; */
        if (message.user)
            StringValue.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string from_user = 3; */
        if (message.fromUser !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromUser);
        /* google.protobuf.StringValue group_name = 4; */
        if (message.groupName)
            StringValue.internalBinaryWrite(message.groupName, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string payload = 5; */
        if (message.payload !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.payload);
        /* bool sleep = 6; */
        if (message.sleep !== false)
            writer.tag(6, WireType.Varint).bool(message.sleep);
        /* repeated string tags = 7; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.tags[i]);
        /* google.protobuf.DoubleValue expire_at = 8; */
        if (message.expireAt)
            DoubleValue.internalBinaryWrite(message.expireAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string created_at = 9; */
        if (message.createdAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.Notification
 */
export const Notification = new Notification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TTLOptions$Type extends MessageType<TTLOptions> {
    constructor() {
        super("notification.TTLOptions", [
            { no: 1, name: "mins", kind: "message", T: () => Int32Value },
            { no: 2, name: "hours", kind: "message", T: () => Int32Value },
            { no: 3, name: "days", kind: "message", T: () => Int32Value }
        ]);
    }
    create(value?: PartialMessage<TTLOptions>): TTLOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TTLOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TTLOptions): TTLOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Int32Value mins */ 1:
                    message.mins = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.mins);
                    break;
                case /* google.protobuf.Int32Value hours */ 2:
                    message.hours = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.hours);
                    break;
                case /* google.protobuf.Int32Value days */ 3:
                    message.days = Int32Value.internalBinaryRead(reader, reader.uint32(), options, message.days);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TTLOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Int32Value mins = 1; */
        if (message.mins)
            Int32Value.internalBinaryWrite(message.mins, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int32Value hours = 2; */
        if (message.hours)
            Int32Value.internalBinaryWrite(message.hours, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Int32Value days = 3; */
        if (message.days)
            Int32Value.internalBinaryWrite(message.days, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.TTLOptions
 */
export const TTLOptions = new TTLOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserGroup$Type extends MessageType<UserGroup> {
    constructor() {
        super("notification.UserGroup", [
            { no: 1, name: "users", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserGroup>): UserGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<UserGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserGroup): UserGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string users */ 1:
                    message.users.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string users = 1; */
        for (let i = 0; i < message.users.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.users[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message notification.UserGroup
 */
export const UserGroup = new UserGroup$Type();
/**
 * @generated ServiceType for protobuf service notification.NotificationService
 */
export const NotificationService = new ServiceType("notification.NotificationService", [
    { name: "GetUserNotifications", options: {}, I: GetUserNotificationsRequest, O: GetUserNotificationsResponse },
    { name: "GetGroupMembers", options: {}, I: GetGroupMembersRequest, O: GetGroupMembersResponse },
    { name: "GetGroupNotifications", options: {}, I: GetGroupNotificationsRequest, O: GetGroupNotificationsResponse },
    { name: "SendNotification", options: {}, I: SendNotificationRequest, O: SendNotificationResponse },
    { name: "SendGroupNotification", options: {}, I: SendGroupNotificationRequest, O: SendGroupNotificationResponse },
    { name: "AddGroupMember", options: {}, I: GroupMemberRequest, O: AddGroupMemberResponse },
    { name: "CreateGroup", options: {}, I: CreateGroupRequest, O: CreateGroupResponse },
    { name: "RemoveGroupMember", options: {}, I: GroupMemberRequest, O: RemoveGroupMemberResponse },
    { name: "SleepNotification", options: {}, I: SleepNotificationRequest, O: SleepNotificationResponse },
    { name: "SubscribeToUserNotifications", serverStreaming: true, options: {}, I: UserRequest, O: Notification },
    { name: "SubscribeToGroupNotifications", serverStreaming: true, options: {}, I: GroupNotificationsRequest, O: Notification }
]);
