// @generated by protobuf-ts 2.9.6 with parameter server_grpc1,client_grpc1,long_type_string
// @generated from protobuf file "notifications.proto" (package "notification", syntax proto3)
// tslint:disable
import { GroupNotificationsRequest } from "./notifications";
import { Notification } from "./notifications";
import { UserRequest } from "./notifications";
import { SleepNotificationResponse } from "./notifications";
import { SleepNotificationRequest } from "./notifications";
import { RemoveGroupMemberResponse } from "./notifications";
import { CreateGroupResponse } from "./notifications";
import { CreateGroupRequest } from "./notifications";
import { AddGroupMemberResponse } from "./notifications";
import { GroupMemberRequest } from "./notifications";
import { SendGroupNotificationResponse } from "./notifications";
import { SendGroupNotificationRequest } from "./notifications";
import { SendNotificationResponse } from "./notifications";
import { SendNotificationRequest } from "./notifications";
import { GetGroupNotificationsResponse } from "./notifications";
import { GetGroupNotificationsRequest } from "./notifications";
import { GetGroupMembersResponse } from "./notifications";
import { GetGroupMembersRequest } from "./notifications";
import { GetUserNotificationsResponse } from "./notifications";
import { GetUserNotificationsRequest } from "./notifications";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service notification.NotificationService
 */
export interface INotificationService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetUserNotifications(notification.GetUserNotificationsRequest) returns (notification.GetUserNotificationsResponse);
     */
    getUserNotifications: grpc.handleUnaryCall<GetUserNotificationsRequest, GetUserNotificationsResponse>;
    /**
     * @generated from protobuf rpc: GetGroupMembers(notification.GetGroupMembersRequest) returns (notification.GetGroupMembersResponse);
     */
    getGroupMembers: grpc.handleUnaryCall<GetGroupMembersRequest, GetGroupMembersResponse>;
    /**
     * @generated from protobuf rpc: GetGroupNotifications(notification.GetGroupNotificationsRequest) returns (notification.GetGroupNotificationsResponse);
     */
    getGroupNotifications: grpc.handleUnaryCall<GetGroupNotificationsRequest, GetGroupNotificationsResponse>;
    /**
     * @generated from protobuf rpc: SendNotification(notification.SendNotificationRequest) returns (notification.SendNotificationResponse);
     */
    sendNotification: grpc.handleUnaryCall<SendNotificationRequest, SendNotificationResponse>;
    /**
     * @generated from protobuf rpc: SendGroupNotification(notification.SendGroupNotificationRequest) returns (notification.SendGroupNotificationResponse);
     */
    sendGroupNotification: grpc.handleUnaryCall<SendGroupNotificationRequest, SendGroupNotificationResponse>;
    /**
     * @generated from protobuf rpc: AddGroupMember(notification.GroupMemberRequest) returns (notification.AddGroupMemberResponse);
     */
    addGroupMember: grpc.handleUnaryCall<GroupMemberRequest, AddGroupMemberResponse>;
    /**
     * @generated from protobuf rpc: CreateGroup(notification.CreateGroupRequest) returns (notification.CreateGroupResponse);
     */
    createGroup: grpc.handleUnaryCall<CreateGroupRequest, CreateGroupResponse>;
    /**
     * @generated from protobuf rpc: RemoveGroupMember(notification.GroupMemberRequest) returns (notification.RemoveGroupMemberResponse);
     */
    removeGroupMember: grpc.handleUnaryCall<GroupMemberRequest, RemoveGroupMemberResponse>;
    /**
     * @generated from protobuf rpc: SleepNotification(notification.SleepNotificationRequest) returns (notification.SleepNotificationResponse);
     */
    sleepNotification: grpc.handleUnaryCall<SleepNotificationRequest, SleepNotificationResponse>;
    /**
     * @generated from protobuf rpc: SubscribeToUserNotifications(notification.UserRequest) returns (stream notification.Notification);
     */
    subscribeToUserNotifications: grpc.handleServerStreamingCall<UserRequest, Notification>;
    /**
     * @generated from protobuf rpc: SubscribeToGroupNotifications(notification.GroupNotificationsRequest) returns (stream notification.Notification);
     */
    subscribeToGroupNotifications: grpc.handleServerStreamingCall<GroupNotificationsRequest, Notification>;
}
/**
 * @grpc/grpc-js definition for the protobuf service notification.NotificationService.
 *
 * Usage: Implement the interface INotificationService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: INotificationService = ...
 * server.addService(notificationServiceDefinition, service);
 * ```
 */
export const notificationServiceDefinition: grpc.ServiceDefinition<INotificationService> = {
    getUserNotifications: {
        path: "/notification.NotificationService/GetUserNotifications",
        originalName: "GetUserNotifications",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetUserNotificationsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetUserNotificationsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetUserNotificationsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetUserNotificationsRequest.toBinary(value))
    },
    getGroupMembers: {
        path: "/notification.NotificationService/GetGroupMembers",
        originalName: "GetGroupMembers",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetGroupMembersResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetGroupMembersRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetGroupMembersResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetGroupMembersRequest.toBinary(value))
    },
    getGroupNotifications: {
        path: "/notification.NotificationService/GetGroupNotifications",
        originalName: "GetGroupNotifications",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetGroupNotificationsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetGroupNotificationsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetGroupNotificationsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetGroupNotificationsRequest.toBinary(value))
    },
    sendNotification: {
        path: "/notification.NotificationService/SendNotification",
        originalName: "SendNotification",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SendNotificationResponse.fromBinary(bytes),
        requestDeserialize: bytes => SendNotificationRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SendNotificationResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(SendNotificationRequest.toBinary(value))
    },
    sendGroupNotification: {
        path: "/notification.NotificationService/SendGroupNotification",
        originalName: "SendGroupNotification",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SendGroupNotificationResponse.fromBinary(bytes),
        requestDeserialize: bytes => SendGroupNotificationRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SendGroupNotificationResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(SendGroupNotificationRequest.toBinary(value))
    },
    addGroupMember: {
        path: "/notification.NotificationService/AddGroupMember",
        originalName: "AddGroupMember",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => AddGroupMemberResponse.fromBinary(bytes),
        requestDeserialize: bytes => GroupMemberRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(AddGroupMemberResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GroupMemberRequest.toBinary(value))
    },
    createGroup: {
        path: "/notification.NotificationService/CreateGroup",
        originalName: "CreateGroup",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateGroupResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateGroupRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateGroupResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateGroupRequest.toBinary(value))
    },
    removeGroupMember: {
        path: "/notification.NotificationService/RemoveGroupMember",
        originalName: "RemoveGroupMember",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => RemoveGroupMemberResponse.fromBinary(bytes),
        requestDeserialize: bytes => GroupMemberRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(RemoveGroupMemberResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GroupMemberRequest.toBinary(value))
    },
    sleepNotification: {
        path: "/notification.NotificationService/SleepNotification",
        originalName: "SleepNotification",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SleepNotificationResponse.fromBinary(bytes),
        requestDeserialize: bytes => SleepNotificationRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SleepNotificationResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(SleepNotificationRequest.toBinary(value))
    },
    subscribeToUserNotifications: {
        path: "/notification.NotificationService/SubscribeToUserNotifications",
        originalName: "SubscribeToUserNotifications",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => Notification.fromBinary(bytes),
        requestDeserialize: bytes => UserRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Notification.toBinary(value)),
        requestSerialize: value => Buffer.from(UserRequest.toBinary(value))
    },
    subscribeToGroupNotifications: {
        path: "/notification.NotificationService/SubscribeToGroupNotifications",
        originalName: "SubscribeToGroupNotifications",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => Notification.fromBinary(bytes),
        requestDeserialize: bytes => GroupNotificationsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Notification.toBinary(value)),
        requestSerialize: value => Buffer.from(GroupNotificationsRequest.toBinary(value))
    }
};
